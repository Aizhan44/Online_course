[Test]
Programm=SimpleTest
Version=0.1
TestName=Тест
Author=Төреш Ақерке
MessageOnComplete=Тест аяқталды!!
AllowFinish=1
ShowResult=1
DisableOpenTest=1
ExitOnComplete=1
LastQ=14

[Q0]
QLabel=C# тілінде қандай функциялар мен әдістер деп нені айтамыз?
LastA=2
A0=C# тілінде функциялар мен әдістер бірдей.
A1=*Функциялар - бұл бағдарламаның басқа бөліктерінен шақыруға болатын белгілі бір тапсырманы орындайтын код бөліктері, ал әдістер класс ішінде анықталған функциялар.
A2=Әдістер - бұл бағдарламаның басқа бөліктерінен шақыруға болатын белгілі бір тапсырманы орындайтын код бөліктері, ал функциялар сынып ішінде анықталған функциялар.

[Q1]
QLabel=C# тіліндегі операторлар дегеніміз не?
LastA=2
A0=Операторлар айнымалыларды жариялау үшін қолданылатын түйінді сөздер.
A1=Операторлар – деректермен операцияларды орындау үшін қолданылатын символдар немесе түйінді сөздер.
A2=*Операторлар - бұл арнайы тапсырмаларды орындау үшін шақырылған C# тіліндегі арнайы функциялар.

[Q2]
QLabel=C# тілі қандай арифметикалық операторларды қолдайды?
LastA=2
A0=* +, -, *, /
A1=&&, ||
A2===, !=

[Q3]
QLabel=C# тілінде логикалық операцияларды орындау үшін қандай логикалық операторлар қолданылады?
LastA=2
A0=* &&, ||
A1=+, -, *
A2===, !=

[Q4]
QLabel=C# тіліндегі шартты мәлімдемелер дегеніміз не?
LastA=2
A0=Шартты операторлар – мәліметтер типін анықтау үшін қолданылатын белгілер.
A1=*Шартты операторлар – шартқа байланысты белгілі бір код блогын орындауға мүмкіндік беретін конструкциялар.
A2=Шартты операторлар жаңа айнымалылар құруға арналған түйінді сөздер болып табылады.

[Q5]
QLabel=C# тілінде циклдердің қандай түрлеріне қолдау көрсетіледі?
LastA=2
A0=for, if
A1=*while, do-while
A2=switch, case

[Q6]
QLabel=C# тілінде циклдарды басқару үшін қандай кілт сөздер қолданылады?
LastA=2
A0=* break, continue
A1=switch, case
A2=if, else

[Q7]
QLabel=C# тіліндегі while және do-while циклдерінің айырмашылығы неде?
LastA=2
A0=while циклі кемінде бір рет орындалады, бірақ do-while циклі бір рет болса да орындалмауы мүмкін.
A1=* do-while циклі кемінде бір рет орындалады, бірақ while циклі бір рет болса да орындалмауы мүмкін.
A2=Олардың арасында ешқандай айырмашылық жоқ.

[Q8]
QLabel=C# тілінде функциялар мен әдістерді жариялау үшін қандай кілт сөздер қолданылады?
LastA=2
A0=func, method
A1=def, function
A2=* void, return

[Q9]
QLabel=Функция және әдіс параметрлері дегеніміз не?
LastA=2
A0=Параметрлер – функцияға немесе өңдеу әдісіне берілетін арнайы айнымалылар.
A1=Параметрлер функция немесе әдіс ішінде анықталған және деректерді сақтау үшін қолданылатын айнымалылар.
A2=* Параметрлер функция немесе әдіс шақырылатын және өңдеу үшін оған жіберілетін нүктеде анықталатын арнайы айнымалылар.

[Q10]
QLabel=C# тіліндегі массивтер дегеніміз не?
LastA=2
A0=*  Массив – реттілікпен орналасқан, индекс арқылы қатынасатын бір типті элементтердің жиыны.
A1=Массив – бір немесе бірнеше элементтерден тұратын айнымалы.
A2=Массив - бұл әр элементтің өз индексі болатын кесте болып табылатын деректер құрылымы.

[Q11]
QLabel=C# тілінде массивті қалай жариялауға және инициализациялауға болады?
LastA=2
A0=int массиві[] = new int[5] {1, 2, 3, 4, 5};
A1=* int[] массиві = new int[5] {1, 2, 3, 4, 5};
A2=int массиві[5] = {1, 2, 3, 4, 5};

[Q12]
QLabel=C# тілінде индекс бойынша массив элементтеріне қалай қол жеткізуге болады?
LastA=2
A0=Индекстер 1-ден басталады.
A1=* индекстер 0-ден басталады.
A2=индекстер -1-ден басталады.

[Q13]
QLabel=C# тілінде ерекше жағдайды қалай өңдеуге болады?
LastA=2
A0=Қатені тексеру үшін if-else операторларын пайдаланыңыз.
A1=* Ерекше жағдайды ұстау және өңдеу үшін try-catch пайдаланыңыз.
A2=Сәйкес ерекше жағдайды өңдеуді таңдау үшін switch-case операторын пайдаланыңыз.

[Q14]
QLabel=OOP (объектіге бағытталған бағдарламалау) дегеніміз не?
LastA=2
A0=* OOP - бұл сыныптардың даналары болып табылатын объектілерді пайдалануға негізделген бағдарламалау әдістемесі.
A1=OOP - бұл объектілермен жұмыс істеу үшін арнайы жасалған бағдарламалау тілі.
A2=OOP – сыныптар мен объектілерді пайдаланбайтын бағдарламалаудың архитектуралық стилі.

